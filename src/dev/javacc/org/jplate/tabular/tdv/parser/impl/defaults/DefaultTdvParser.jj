PARSER_BEGIN ( DefaultTdvParser )

package org.jplate.tabular.tdv.parser.impl.defaults;


import java.io.StringReader;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.jplate.JPlateException;

import org.jplate.foundation.parser.javacc.impl.AbstractJavaccParser;

import org.jplate.tabular.tdv.parser.TdvBuilderIfc;
import org.jplate.tabular.tdv.parser.TdvParserIfc;



/**
 
    Default implementation of a TDV (tabbed delimited value) parser.

    <p/>

    An example of TDV data follows:

    <ul>
        <li> field 1-1\tfield 1-2\tfield 1-3 </li>
        <li> field 2-1\tfield 2-2\tfield 2-3 </li>
        <li> field 3-1\tfield 3-2\tfield 3-3 </li>
    </ul>

    <p/><a  name = "Examples"/>
    The following are some examples on how to use this class.  Assume some
    implemention of {@link org.jplate.tabular.tdv.parser.TdvBuilderIfc}
    exists.<br/>

    <p/>

    <ul>
        <li>
            Parsing from an {@link java.io.InputStream}:
            <pre>
final TdvBuilderIfc builder = // Some implementation...

final DefaultTdvParserIfc parser = new DefaultTdvParser ();

final InputStream inputStream = new FileInputStream ( "MyTdvFile.tdv" );

parser.parse ( inputStream, builder );
            </pre>
        </li>

        <li>
            Parsing from a {@link java.io.Reader}:
            <pre>
final TdvBuilderIfc builder = // Some implementation...

final DefaultTdvParserIfc parser = new DefaultTdvParser ();

final Reader reader = new FileReader ( "MyTdvFile.tdv" );

parser.parse ( reader, builder );            
            </pre>
        </li>

        <li>
            Parsing from a {@link java.lang.String}:
            <pre>
final TdvBuilderIfc builder = // Some implementation...

final DefaultTdvParserIfc parser = new DefaultTdvParser ();

final String string = // Contains TDV data in the form of a String.

parser.parse ( string, builder );                
            </pre>
        </li>

        <li>
            Parsing from a {@link java.io.File}:
            <pre>
final TdvBuilderIfc builder = // Some implementation...

final DefaultTdvParserIfc parser = new DefaultTdvParser ();

final File file = new File ( "MyTdvFile.tdv" );

parser.parse ( file, builder );
            </pre>
        </li>
    </ul>

    <b><i>Please note:</i></b>  This class is <i>not</i> thread-safe.

    <p/>

    <pre>
Modifications:
    $Date: 2008-12-02 12:32:45 -0500 (Tue, 02 Dec 2008) $
    $Revision: 479 $
    $Author: sfloess $
    $HeadURL: https://jplate.svn.sourceforge.net/svnroot/jplate/trunk/src/dev/javacc/org/jplate/tabular/tdv/parser/impl/defaults/DefaultTdvParser.jj $
    </pre>


*/
public final class DefaultTdvParser <B extends TdvBuilderIfc <?>>
    extends AbstractJavaccParser <B>
        implements TdvParserIfc <B>
{
    // ----------------------------------------------------------------------
    //
    // Interface definitions follow...
    //
    // ----------------------------------------------------------------------

    
    // ----------------------------------------------------------------------
    //
    // Interface definitions follow...
    //
    // ----------------------------------------------------------------------

    
    // ----------------------------------------------------------------------
    //
    // Static class definitions follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Static member definitions follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Static methods follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Instance class definitions follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Instance member definitions follow...
    //
    // ----------------------------------------------------------------------


    /**
     *
     * Used for logging.
     *
     */
    private final transient Log _log =
        LogFactory.getLog ( DefaultTdvParser.class );


    // ----------------------------------------------------------------------
    //
    // Constructor definitions follow...
    //
    // ----------------------------------------------------------------------


    /**
     *
     * Default constructor.
     *
     */
    public DefaultTdvParser ()
    {
        this ( new StringReader ( "" ) );

        if ( _log.isDebugEnabled () )
        {
            _log.debug ( "New DefaultTdvParser created" );
        }
    }


    // ----------------------------------------------------------------------
    //
    // Instance method definitions follow...
    //
    // ----------------------------------------------------------------------


}

PARSER_END ( DefaultTdvParser )

TOKEN:
{

        <#CR:                ("\n")>
        |
        <#LF:                ("\r")>
        |
        <DELIMITER:          ("\t")>
        |
        <ESCAPED_DELIMITER:  ("\\" <DELIMITER>)>
        |
        <FIELD:              ((<ESCAPED_DELIMITER> | ~["\t", "\n", "\r"])+)> 
        |
        <EOL:                (<CR> | <CR> <LF>)>
}


/**
 *
 * {@inheritDoc}
 *
 */
protected void parse ( final B builder ) throws Exception:
{
    Token token;

    boolean isNewRecord    = true;
    boolean isLastTokenTab = true;
    boolean isLastTokenEOL = false;

    if ( _log.isDebugEnabled () )
    {
        _log.debug ( "Parsing begins" );
    }

    builder.buildStart  ();
}

{
    (
        token = <DELIMITER>
        {
            if ( _log.isDebugEnabled () )
            {
                _log.debug
                (
                    "Delimiter encountered @ [" + token.beginLine + ", " +
                    token.beginColumn + "]"
                );
            }

            if ( isNewRecord )
            {
                if ( _log.isDebugEnabled () )
                {
                    _log.debug ( "Building new record" );
                }

                builder.buildRecord ( token.beginLine );
            }

            if ( isLastTokenTab )
            {
                if ( _log.isDebugEnabled () )
                {
                    _log.debug ( "Building ommitted field" );
                }

                builder.buildOmittedField ( token.beginLine, token.beginColumn );
            }

            isNewRecord    = false;
            isLastTokenTab = true;
        }

        |

        token = <FIELD>
        {
            if ( _log.isDebugEnabled () )
            {
                _log.debug
                (
                    "Encountered field [" + token.image + "] @ [" +
                    token.beginLine + ", " + token.beginColumn + "]"
                );
            }

            if ( isNewRecord )
            {
                if ( _log.isDebugEnabled () )
                {
                    _log.debug ( "Building new record" );
                }

                builder.buildRecord ( token.beginLine );
            }

            if ( _log.isDebugEnabled () )
            {
                _log.debug ( "Building field" );
            }

            builder.buildField ( token.image, token.beginLine, token.beginColumn );

            isNewRecord    = false;
            isLastTokenTab = false;
            isLastTokenEOL = false;
        }

        | 

        token = <EOL>
        {
            if ( _log.isDebugEnabled () )
            {
                _log.debug
                (
                    "Encountered EOL @ [" + token.beginLine + ", " +
                    token.beginColumn + "]"
                );
            }

            if ( isNewRecord )
            {
                if ( _log.isDebugEnabled () )
                {
                    _log.debug ( "Building new record" );
                }

                builder.buildRecord ( token.beginLine );
            }

            if ( isLastTokenTab )
            {
                if ( _log.isDebugEnabled () )
                {
                    _log.debug ( "Building ommitted field" );
                }

                builder.buildOmittedField ( token.beginLine, token.beginColumn );
            }

            isNewRecord    = true;
            isLastTokenTab = true;
            isLastTokenEOL = true;
        }
    )*

    token = <EOF>
    {
        if ( _log.isDebugEnabled () )
        {
            _log.debug
            (
                "Encountered EOF @ [" + token.beginLine + ", " + token.beginColumn +
                "]"
            );
        }

        if ( ! isLastTokenEOL && isLastTokenTab )
        {
            if ( _log.isDebugEnabled () )
            {
                _log.debug ( "Building ommitted field" );
            }

            builder.buildOmittedField ( token.beginLine, token.beginColumn );
        }

        if ( _log.isDebugEnabled () )
        {
            _log.debug ( "Building end" );
        }

        builder.buildEnd ( token.beginLine, token.beginColumn );
    }
}
