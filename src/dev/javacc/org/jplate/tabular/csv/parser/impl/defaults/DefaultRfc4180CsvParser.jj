PARSER_BEGIN ( DefaultRfc4180CsvParser )

package org.jplate.tabular.csv.parser.impl.defaults;


import java.io.StringReader;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.jplate.JPlateException;

import org.jplate.foundation.parser.javacc.impl.AbstractJavaccParser;

import org.jplate.tabular.parser.FieldCountMismatchException;

import org.jplate.tabular.csv.parser.CsvBuilderIfc;
import org.jplate.tabular.csv.parser.CsvParserIfc;



/**
 
    This CSV parser strictly adheres to
    <a  href = "http://www.rfc-editor.org/rfc/rfc4180.txt">RFC 4180</a>

    <b><i>Please note:</i></b>  This class is <i>not</i> thread-safe.

    <p/>

    An example of CSV data follows:

    <ul>
        <li> field 1-1,field 1-2,field 1-3 </li>
        <li> field 2-1,field 2-2,field 2-3 </li>
        <li> field 3-1,field 3-2,field 3-3 </li>
    </ul>

    <p/><a  name = "Examples"/>
    The following are some examples on how to use this class.  Assume some
    implemention of {@link org.jplate.tabular.csv.parser.CsvBuilderIfc}
    exists.<br/>

    <p/>

    <ul>
        <li>
            Parsing from an {@link java.io.InputStream}:
            <pre>
final CsvBuilderIfc builder = // Some implementation...

final CsvParserIfc parser = new DefaultRfc4180CsvParser ();

final InputStream inputStream = new FileInputStream ( "MyCsvFile.csv" );

parser.parse ( inputStream, builder );
            </pre>
        </li>

        <li>
            Parsing from a {@link java.io.Reader}:
            <pre>
final CsvBuilderIfc builder = // Some implementation...

final CsvParserIfc parser = new DefaultRfc4180CsvParser ();

final Reader reader = new FileReader ( "MyCsvFile.csv" );

parser.parse ( reader, builder );            
            </pre>
        </li>

        <li>
            Parsing from a {@link java.lang.String}:
            <pre>
final CsvBuilderIfc builder = // Some implementation...

final CsvParserIfc parser = new DefaultRfc4180CsvParser ();

final String string = // Contains CSV data in the form of a String.

parser.parse ( string, builder );                
            </pre>
        </li>

        <li>
            Parsing from a {@link java.io.File}:
            <pre>
final CsvBuilderIfc builder = // Some implementation...

final CsvParserIfc parser = new DefaultRfc4180CsvParser ();

final File file = new File ( "MyCsvFile.csv" );

parser.parse ( file, builder );
            </pre>
        </li>
    </ul>

    <p/>

    <pre>
Modifications:
    $Date: 2008-12-02 12:32:45 -0500 (Tue, 02 Dec 2008) $
    $Revision: 479 $
    $Author: sfloess $
    $HeadURL: https://jplate.svn.sourceforge.net/svnroot/jplate/trunk/src/dev/javacc/org/jplate/tabular/csv/parser/impl/defaults/DefaultRfc4180CsvParser.jj $
    </pre>


*/
public final class DefaultRfc4180CsvParser <B extends CsvBuilderIfc <?>>
    extends AbstractJavaccParser <B>
        implements CsvParserIfc <B>
{
    // ----------------------------------------------------------------------
    //
    // Interface definitions follow...
    //
    // ----------------------------------------------------------------------

    
    // ----------------------------------------------------------------------
    //
    // Interface definitions follow...
    //
    // ----------------------------------------------------------------------

    
    // ----------------------------------------------------------------------
    //
    // Static class definitions follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Static member definitions follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Static methods follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Instance class definitions follow...
    //
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    //
    // Instance member definitions follow...
    //
    // ----------------------------------------------------------------------


    /**
     *
     * Used for logging.
     *
     */
    private final transient Log _log =
        LogFactory.getLog ( DefaultRfc4180CsvParser.class );


    // ----------------------------------------------------------------------
    //
    // Constructor definitions follow...
    //
    // ----------------------------------------------------------------------


    /**
     *
     * Default constructor.
     *
     */
    public DefaultRfc4180CsvParser ()
    {
        this ( new StringReader ( "" ) );

        if ( _log.isDebugEnabled () )
        {
            _log.debug ( "New DefaultRfc4180CsvParser created" );
        }
    }


    // ----------------------------------------------------------------------
    //
    // Instance method definitions follow...
    //
    // ----------------------------------------------------------------------


}

PARSER_END ( DefaultRfc4180CsvParser )

TOKEN:
{

        <#CR:                ("\n")>
        |
        <#LF:                ("\r")>
        |
        <#DOUBLE_QUOTE:      ("\"")>
        |
        <#TWO_DOUBLE_QUOTES: (<DOUBLE_QUOTE> <DOUBLE_QUOTE>)>
        |
        <#TEXT:              (~["\"", "\n", "\r", ","])> 
        |
        <DELIMITER:          (",")>
        |
        <QUOTED_FIELD:       (([" ", "\t"])* <DOUBLE_QUOTE> ( [ " ", "!", "#" - "~", "\n", "\r", "\t" ] | <TWO_DOUBLE_QUOTES> )* <DOUBLE_QUOTE>)>
        |
        <NON_QUOTED_FIELD:   (<TEXT>)+>
        |
        <EOL:              (<CR> | <CR> <LF>)>
}


/**
 *
 * {@inheritDoc}
 *
 * @throws FieldCountMismatchException If the number of fields processed is greater
 *         than the maximum number of fields.
 *
 */
protected void parse ( final B builder ) throws Exception:
{
    Token eolToken;
    Token eofToken;
    Token commaToken;

    int maxFields  = -1;
    int fieldCount =  0;

    if ( _log.isDebugEnabled () )
    {
        _log.debug ( "Parsing begins" );
    }

    builder.buildStart ();
}

{
    (
        parseField ( builder, maxFields, ++fieldCount )

        (
            commaToken = <DELIMITER>
            {
                if ( _log.isDebugEnabled () )
                {
                    _log.debug
                    (
                        "Comman encountered at [" + commaToken.beginLine + ", " +
                        commaToken.beginColumn + "]"
                    );
                }
            }

            parseField ( builder, maxFields, ++fieldCount )
        )*

        (
            eolToken = <EOL>
            {
                if ( _log.isDebugEnabled () )
                {
                    _log.debug
                    (
                        "EOL encountered at [" + eolToken.beginLine + ", " +
                        eolToken.beginColumn + "]"
                    );
                }

                if ( maxFields < 0 )
                {
                    maxFields = fieldCount;
                }
                else if ( fieldCount > maxFields )
                {
                    final FieldCountMismatchException fcme =
                        new FieldCountMismatchException ( maxFields, fieldCount );

                    _log.error ( fcme );

                    throw fcme;
                }

                fieldCount = 0;
            }
        )?
    )*

    eofToken = <EOF>
    {
        if ( _log.isDebugEnabled () )
        {
            _log.debug
            (
                "EOF encountered at [" + eofToken.beginLine + ", " +
                eofToken.beginColumn + "]"
            );
        }

        if ( maxFields > -1 && fieldCount > maxFields )
        {
            final FieldCountMismatchException fcme =
                new FieldCountMismatchException ( maxFields, fieldCount );

            _log.error ( fcme );

            throw fcme;
        }

        if ( _log.isDebugEnabled () )
        {
            _log.debug ( "Building end" );
        }

        builder.buildEnd ( eofToken.endLine, eofToken.endColumn );
    }
}


/**
 *
 * Parses either a quoted or non-quoted field.
 *
 * @param builder The object who can build fields.
 *
 * @param maxFields The maximum number of fields thus far.
 *
 * @param fieldCount The current field count.
 *
 * @throws FieldCountMismatchException If the number of fields processed is greater
 *         than the maximum number of fields.
 *
 * @throws Exception If any problem arises parsing.
 *
 */
void parseField
    ( final B builder, final int maxFields, final int fieldCount )
        throws Exception:
{
    Token fieldToken;

    //
    // Make sure the field count is not greater than the maximum
    // number of fields.  If so, we have an error.
    //
    if ( maxFields > -1 && fieldCount > maxFields )
    {
        final FieldCountMismatchException fcme =
            new FieldCountMismatchException ( maxFields, fieldCount );

        _log.error ( fcme );

        throw fcme;
    }
}

{
    fieldToken = <QUOTED_FIELD>
    {
        if ( _log.isDebugEnabled () )
        {
            _log.debug
            (
                "Quoted field [" + fieldToken.image + "] @ [" +
                fieldToken.beginLine + ", " + fieldToken.beginColumn + "]"
            );
        }

        if ( fieldCount < 2 )
        {
            if ( _log.isDebugEnabled () )
            {
                _log.debug ( "Building record" );
            }

            builder.buildRecord ( fieldToken.beginLine );
        }

        if ( _log.isDebugEnabled () )
        {
            _log.debug ( "Building quoted field" );
        }

        builder.buildQuotedField ( fieldToken.image, fieldToken.beginLine, fieldToken.beginColumn );
    }

    | 

    fieldToken = <NON_QUOTED_FIELD>
    {
        if ( _log.isDebugEnabled () )
        {
            _log.debug
            (
                "NON-uoted field [" + fieldToken.image + "] @ [" +
                fieldToken.beginLine + ", " + fieldToken.beginColumn + "]"
            );
        }

        if ( fieldCount < 2 )
        {
            if ( _log.isDebugEnabled () )
            {
                _log.debug ( "Building record" );
            }

            builder.buildRecord ( fieldToken.beginLine );
        }

        if ( _log.isDebugEnabled () )
        {
            _log.debug ( "Building field" );
        }

        builder.buildField ( fieldToken.image, fieldToken.beginLine, fieldToken.beginColumn );
    }
}

